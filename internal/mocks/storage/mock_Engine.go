// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	sync "github.com/neekrasov/kvdb/pkg/sync"
)

// Engine is an autogenerated mock type for the Engine type
type Engine struct {
	mock.Mock
}

type Engine_Expecter struct {
	mock *mock.Mock
}

func (_m *Engine) EXPECT() *Engine_Expecter {
	return &Engine_Expecter{mock: &_m.Mock}
}

// Del provides a mock function with given fields: ctx, key
func (_m *Engine) Del(ctx context.Context, key string) error {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Del")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Engine_Del_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Del'
type Engine_Del_Call struct {
	*mock.Call
}

// Del is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *Engine_Expecter) Del(ctx interface{}, key interface{}) *Engine_Del_Call {
	return &Engine_Del_Call{Call: _e.mock.On("Del", ctx, key)}
}

func (_c *Engine_Del_Call) Run(run func(ctx context.Context, key string)) *Engine_Del_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Engine_Del_Call) Return(_a0 error) *Engine_Del_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Engine_Del_Call) RunAndReturn(run func(context.Context, string) error) *Engine_Del_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, key
func (_m *Engine) Get(ctx context.Context, key string) (string, bool) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 string
	var r1 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, bool)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) bool); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Engine_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Engine_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *Engine_Expecter) Get(ctx interface{}, key interface{}) *Engine_Get_Call {
	return &Engine_Get_Call{Call: _e.mock.On("Get", ctx, key)}
}

func (_c *Engine_Get_Call) Run(run func(ctx context.Context, key string)) *Engine_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Engine_Get_Call) Return(_a0 string, _a1 bool) *Engine_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Engine_Get_Call) RunAndReturn(run func(context.Context, string) (string, bool)) *Engine_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: ctx, key, value
func (_m *Engine) Set(ctx context.Context, key string, value string) {
	_m.Called(ctx, key, value)
}

// Engine_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type Engine_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - value string
func (_e *Engine_Expecter) Set(ctx interface{}, key interface{}, value interface{}) *Engine_Set_Call {
	return &Engine_Set_Call{Call: _e.mock.On("Set", ctx, key, value)}
}

func (_c *Engine_Set_Call) Run(run func(ctx context.Context, key string, value string)) *Engine_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Engine_Set_Call) Return() *Engine_Set_Call {
	_c.Call.Return()
	return _c
}

func (_c *Engine_Set_Call) RunAndReturn(run func(context.Context, string, string)) *Engine_Set_Call {
	_c.Run(run)
	return _c
}

// Watch provides a mock function with given fields: ctx, key
func (_m *Engine) Watch(ctx context.Context, key string) sync.Future[string] {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Watch")
	}

	var r0 sync.Future[string]
	if rf, ok := ret.Get(0).(func(context.Context, string) sync.Future[string]); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(sync.Future[string])
	}

	return r0
}

// Engine_Watch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Watch'
type Engine_Watch_Call struct {
	*mock.Call
}

// Watch is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *Engine_Expecter) Watch(ctx interface{}, key interface{}) *Engine_Watch_Call {
	return &Engine_Watch_Call{Call: _e.mock.On("Watch", ctx, key)}
}

func (_c *Engine_Watch_Call) Run(run func(ctx context.Context, key string)) *Engine_Watch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Engine_Watch_Call) Return(_a0 sync.Future[string]) *Engine_Watch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Engine_Watch_Call) RunAndReturn(run func(context.Context, string) sync.Future[string]) *Engine_Watch_Call {
	_c.Call.Return(run)
	return _c
}

// NewEngine creates a new instance of Engine. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEngine(t interface {
	mock.TestingT
	Cleanup(func())
}) *Engine {
	mock := &Engine{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
