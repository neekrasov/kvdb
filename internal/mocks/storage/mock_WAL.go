// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	wal "github.com/neekrasov/kvdb/internal/database/storage/wal"
)

// WAL is an autogenerated mock type for the WAL type
type WAL struct {
	mock.Mock
}

type WAL_Expecter struct {
	mock *mock.Mock
}

func (_m *WAL) EXPECT() *WAL_Expecter {
	return &WAL_Expecter{mock: &_m.Mock}
}

// Del provides a mock function with given fields: key
func (_m *WAL) Del(key string) error {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Del")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WAL_Del_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Del'
type WAL_Del_Call struct {
	*mock.Call
}

// Del is a helper method to define mock.On call
//   - key string
func (_e *WAL_Expecter) Del(key interface{}) *WAL_Del_Call {
	return &WAL_Del_Call{Call: _e.mock.On("Del", key)}
}

func (_c *WAL_Del_Call) Run(run func(key string)) *WAL_Del_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *WAL_Del_Call) Return(_a0 error) *WAL_Del_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *WAL_Del_Call) RunAndReturn(run func(string) error) *WAL_Del_Call {
	_c.Call.Return(run)
	return _c
}

// Recover provides a mock function with given fields: applyFunc
func (_m *WAL) Recover(applyFunc func(wal.LogEntry) error) error {
	ret := _m.Called(applyFunc)

	if len(ret) == 0 {
		panic("no return value specified for Recover")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(wal.LogEntry) error) error); ok {
		r0 = rf(applyFunc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WAL_Recover_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Recover'
type WAL_Recover_Call struct {
	*mock.Call
}

// Recover is a helper method to define mock.On call
//   - applyFunc func(wal.LogEntry) error
func (_e *WAL_Expecter) Recover(applyFunc interface{}) *WAL_Recover_Call {
	return &WAL_Recover_Call{Call: _e.mock.On("Recover", applyFunc)}
}

func (_c *WAL_Recover_Call) Run(run func(applyFunc func(wal.LogEntry) error)) *WAL_Recover_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(wal.LogEntry) error))
	})
	return _c
}

func (_c *WAL_Recover_Call) Return(_a0 error) *WAL_Recover_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *WAL_Recover_Call) RunAndReturn(run func(func(wal.LogEntry) error) error) *WAL_Recover_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: key, value
func (_m *WAL) Set(key string, value string) error {
	ret := _m.Called(key, value)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WAL_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type WAL_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - key string
//   - value string
func (_e *WAL_Expecter) Set(key interface{}, value interface{}) *WAL_Set_Call {
	return &WAL_Set_Call{Call: _e.mock.On("Set", key, value)}
}

func (_c *WAL_Set_Call) Run(run func(key string, value string)) *WAL_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *WAL_Set_Call) Return(_a0 error) *WAL_Set_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *WAL_Set_Call) RunAndReturn(run func(string, string) error) *WAL_Set_Call {
	_c.Call.Return(run)
	return _c
}

// NewWAL creates a new instance of WAL. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWAL(t interface {
	mock.TestingT
	Cleanup(func())
}) *WAL {
	mock := &WAL{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
