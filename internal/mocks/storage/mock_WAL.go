// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	wal "github.com/neekrasov/kvdb/internal/database/storage/wal"
)

// WAL is an autogenerated mock type for the WAL type
type WAL struct {
	mock.Mock
}

type WAL_Expecter struct {
	mock *mock.Mock
}

func (_m *WAL) EXPECT() *WAL_Expecter {
	return &WAL_Expecter{mock: &_m.Mock}
}

// Del provides a mock function with given fields: ctx, key
func (_m *WAL) Del(ctx context.Context, key string) error {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Del")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WAL_Del_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Del'
type WAL_Del_Call struct {
	*mock.Call
}

// Del is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *WAL_Expecter) Del(ctx interface{}, key interface{}) *WAL_Del_Call {
	return &WAL_Del_Call{Call: _e.mock.On("Del", ctx, key)}
}

func (_c *WAL_Del_Call) Run(run func(ctx context.Context, key string)) *WAL_Del_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *WAL_Del_Call) Return(_a0 error) *WAL_Del_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *WAL_Del_Call) RunAndReturn(run func(context.Context, string) error) *WAL_Del_Call {
	_c.Call.Return(run)
	return _c
}

// Flush provides a mock function with given fields: batch
func (_m *WAL) Flush(batch []wal.WriteEntry) error {
	ret := _m.Called(batch)

	if len(ret) == 0 {
		panic("no return value specified for Flush")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]wal.WriteEntry) error); ok {
		r0 = rf(batch)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WAL_Flush_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Flush'
type WAL_Flush_Call struct {
	*mock.Call
}

// Flush is a helper method to define mock.On call
//   - batch []wal.WriteEntry
func (_e *WAL_Expecter) Flush(batch interface{}) *WAL_Flush_Call {
	return &WAL_Flush_Call{Call: _e.mock.On("Flush", batch)}
}

func (_c *WAL_Flush_Call) Run(run func(batch []wal.WriteEntry)) *WAL_Flush_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]wal.WriteEntry))
	})
	return _c
}

func (_c *WAL_Flush_Call) Return(_a0 error) *WAL_Flush_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *WAL_Flush_Call) RunAndReturn(run func([]wal.WriteEntry) error) *WAL_Flush_Call {
	_c.Call.Return(run)
	return _c
}

// Recover provides a mock function with given fields: applyFunc
func (_m *WAL) Recover(applyFunc func(context.Context, []wal.LogEntry) error) (int64, error) {
	ret := _m.Called(applyFunc)

	if len(ret) == 0 {
		panic("no return value specified for Recover")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(func(context.Context, []wal.LogEntry) error) (int64, error)); ok {
		return rf(applyFunc)
	}
	if rf, ok := ret.Get(0).(func(func(context.Context, []wal.LogEntry) error) int64); ok {
		r0 = rf(applyFunc)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(func(context.Context, []wal.LogEntry) error) error); ok {
		r1 = rf(applyFunc)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WAL_Recover_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Recover'
type WAL_Recover_Call struct {
	*mock.Call
}

// Recover is a helper method to define mock.On call
//   - applyFunc func(context.Context , []wal.LogEntry) error
func (_e *WAL_Expecter) Recover(applyFunc interface{}) *WAL_Recover_Call {
	return &WAL_Recover_Call{Call: _e.mock.On("Recover", applyFunc)}
}

func (_c *WAL_Recover_Call) Run(run func(applyFunc func(context.Context, []wal.LogEntry) error)) *WAL_Recover_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, []wal.LogEntry) error))
	})
	return _c
}

func (_c *WAL_Recover_Call) Return(_a0 int64, _a1 error) *WAL_Recover_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *WAL_Recover_Call) RunAndReturn(run func(func(context.Context, []wal.LogEntry) error) (int64, error)) *WAL_Recover_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: ctx, key, value
func (_m *WAL) Set(ctx context.Context, key string, value string) error {
	ret := _m.Called(ctx, key, value)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WAL_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type WAL_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - value string
func (_e *WAL_Expecter) Set(ctx interface{}, key interface{}, value interface{}) *WAL_Set_Call {
	return &WAL_Set_Call{Call: _e.mock.On("Set", ctx, key, value)}
}

func (_c *WAL_Set_Call) Run(run func(ctx context.Context, key string, value string)) *WAL_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *WAL_Set_Call) Return(_a0 error) *WAL_Set_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *WAL_Set_Call) RunAndReturn(run func(context.Context, string, string) error) *WAL_Set_Call {
	_c.Call.Return(run)
	return _c
}

// NewWAL creates a new instance of WAL. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWAL(t interface {
	mock.TestingT
	Cleanup(func())
}) *WAL {
	mock := &WAL{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
