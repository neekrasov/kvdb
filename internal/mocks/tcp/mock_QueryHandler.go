// Code generated by mockery. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// QueryHandler is an autogenerated mock type for the QueryHandler type
type QueryHandler struct {
	mock.Mock
}

type QueryHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *QueryHandler) EXPECT() *QueryHandler_Expecter {
	return &QueryHandler_Expecter{mock: &_m.Mock}
}

// HandleQuery provides a mock function with given fields: _a0
func (_m *QueryHandler) HandleQuery(_a0 string) string {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for HandleQuery")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// QueryHandler_HandleQuery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleQuery'
type QueryHandler_HandleQuery_Call struct {
	*mock.Call
}

// HandleQuery is a helper method to define mock.On call
//   - _a0 string
func (_e *QueryHandler_Expecter) HandleQuery(_a0 interface{}) *QueryHandler_HandleQuery_Call {
	return &QueryHandler_HandleQuery_Call{Call: _e.mock.On("HandleQuery", _a0)}
}

func (_c *QueryHandler_HandleQuery_Call) Run(run func(_a0 string)) *QueryHandler_HandleQuery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *QueryHandler_HandleQuery_Call) Return(_a0 string) *QueryHandler_HandleQuery_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *QueryHandler_HandleQuery_Call) RunAndReturn(run func(string) string) *QueryHandler_HandleQuery_Call {
	_c.Call.Return(run)
	return _c
}

// NewQueryHandler creates a new instance of QueryHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQueryHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *QueryHandler {
	mock := &QueryHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
