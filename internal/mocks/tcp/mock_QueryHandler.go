// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	models "github.com/neekrasov/kvdb/internal/database/storage/models"
	mock "github.com/stretchr/testify/mock"
)

// QueryHandler is an autogenerated mock type for the QueryHandler type
type QueryHandler struct {
	mock.Mock
}

type QueryHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *QueryHandler) EXPECT() *QueryHandler_Expecter {
	return &QueryHandler_Expecter{mock: &_m.Mock}
}

// HandleQuery provides a mock function with given fields: user, query
func (_m *QueryHandler) HandleQuery(user *models.User, query string) string {
	ret := _m.Called(user, query)

	if len(ret) == 0 {
		panic("no return value specified for HandleQuery")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(*models.User, string) string); ok {
		r0 = rf(user, query)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// QueryHandler_HandleQuery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleQuery'
type QueryHandler_HandleQuery_Call struct {
	*mock.Call
}

// HandleQuery is a helper method to define mock.On call
//   - user *models.User
//   - query string
func (_e *QueryHandler_Expecter) HandleQuery(user interface{}, query interface{}) *QueryHandler_HandleQuery_Call {
	return &QueryHandler_HandleQuery_Call{Call: _e.mock.On("HandleQuery", user, query)}
}

func (_c *QueryHandler_HandleQuery_Call) Run(run func(user *models.User, query string)) *QueryHandler_HandleQuery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.User), args[1].(string))
	})
	return _c
}

func (_c *QueryHandler_HandleQuery_Call) Return(_a0 string) *QueryHandler_HandleQuery_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *QueryHandler_HandleQuery_Call) RunAndReturn(run func(*models.User, string) string) *QueryHandler_HandleQuery_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function with given fields: query
func (_m *QueryHandler) Login(query string) (*models.User, error) {
	ret := _m.Called(query)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.User, error)); ok {
		return rf(query)
	}
	if rf, ok := ret.Get(0).(func(string) *models.User); ok {
		r0 = rf(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryHandler_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type QueryHandler_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - query string
func (_e *QueryHandler_Expecter) Login(query interface{}) *QueryHandler_Login_Call {
	return &QueryHandler_Login_Call{Call: _e.mock.On("Login", query)}
}

func (_c *QueryHandler_Login_Call) Run(run func(query string)) *QueryHandler_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *QueryHandler_Login_Call) Return(_a0 *models.User, _a1 error) *QueryHandler_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *QueryHandler_Login_Call) RunAndReturn(run func(string) (*models.User, error)) *QueryHandler_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Logout provides a mock function with given fields: user, args
func (_m *QueryHandler) Logout(user *models.User, args []string) string {
	ret := _m.Called(user, args)

	if len(ret) == 0 {
		panic("no return value specified for Logout")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(*models.User, []string) string); ok {
		r0 = rf(user, args)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// QueryHandler_Logout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logout'
type QueryHandler_Logout_Call struct {
	*mock.Call
}

// Logout is a helper method to define mock.On call
//   - user *models.User
//   - args []string
func (_e *QueryHandler_Expecter) Logout(user interface{}, args interface{}) *QueryHandler_Logout_Call {
	return &QueryHandler_Logout_Call{Call: _e.mock.On("Logout", user, args)}
}

func (_c *QueryHandler_Logout_Call) Run(run func(user *models.User, args []string)) *QueryHandler_Logout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.User), args[1].([]string))
	})
	return _c
}

func (_c *QueryHandler_Logout_Call) Return(_a0 string) *QueryHandler_Logout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *QueryHandler_Logout_Call) RunAndReturn(run func(*models.User, []string) string) *QueryHandler_Logout_Call {
	_c.Call.Return(run)
	return _c
}

// NewQueryHandler creates a new instance of QueryHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQueryHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *QueryHandler {
	mock := &QueryHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
