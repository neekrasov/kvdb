// Code generated by mockery. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Segment is an autogenerated mock type for the Segment type
type Segment struct {
	mock.Mock
}

type Segment_Expecter struct {
	mock *mock.Mock
}

func (_m *Segment) EXPECT() *Segment_Expecter {
	return &Segment_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *Segment) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Segment_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type Segment_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *Segment_Expecter) Close() *Segment_Close_Call {
	return &Segment_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *Segment_Close_Call) Run(run func()) *Segment_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Segment_Close_Call) Return(_a0 error) *Segment_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Segment_Close_Call) RunAndReturn(run func() error) *Segment_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Compressed provides a mock function with no fields
func (_m *Segment) Compressed() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Compressed")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Segment_Compressed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Compressed'
type Segment_Compressed_Call struct {
	*mock.Call
}

// Compressed is a helper method to define mock.On call
func (_e *Segment_Expecter) Compressed() *Segment_Compressed_Call {
	return &Segment_Compressed_Call{Call: _e.mock.On("Compressed")}
}

func (_c *Segment_Compressed_Call) Run(run func()) *Segment_Compressed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Segment_Compressed_Call) Return(_a0 bool) *Segment_Compressed_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Segment_Compressed_Call) RunAndReturn(run func() bool) *Segment_Compressed_Call {
	_c.Call.Return(run)
	return _c
}

// ID provides a mock function with no fields
func (_m *Segment) ID() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ID")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Segment_ID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ID'
type Segment_ID_Call struct {
	*mock.Call
}

// ID is a helper method to define mock.On call
func (_e *Segment_Expecter) ID() *Segment_ID_Call {
	return &Segment_ID_Call{Call: _e.mock.On("ID")}
}

func (_c *Segment_ID_Call) Run(run func()) *Segment_ID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Segment_ID_Call) Return(_a0 int) *Segment_ID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Segment_ID_Call) RunAndReturn(run func() int) *Segment_ID_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields: p
func (_m *Segment) Read(p []byte) (int, error) {
	ret := _m.Called(p)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (int, error)); ok {
		return rf(p)
	}
	if rf, ok := ret.Get(0).(func([]byte) int); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Segment_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type Segment_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - p []byte
func (_e *Segment_Expecter) Read(p interface{}) *Segment_Read_Call {
	return &Segment_Read_Call{Call: _e.mock.On("Read", p)}
}

func (_c *Segment_Read_Call) Run(run func(p []byte)) *Segment_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *Segment_Read_Call) Return(n int, err error) *Segment_Read_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *Segment_Read_Call) RunAndReturn(run func([]byte) (int, error)) *Segment_Read_Call {
	_c.Call.Return(run)
	return _c
}

// Size provides a mock function with no fields
func (_m *Segment) Size() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Size")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Segment_Size_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Size'
type Segment_Size_Call struct {
	*mock.Call
}

// Size is a helper method to define mock.On call
func (_e *Segment_Expecter) Size() *Segment_Size_Call {
	return &Segment_Size_Call{Call: _e.mock.On("Size")}
}

func (_c *Segment_Size_Call) Run(run func()) *Segment_Size_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Segment_Size_Call) Return(_a0 int) *Segment_Size_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Segment_Size_Call) RunAndReturn(run func() int) *Segment_Size_Call {
	_c.Call.Return(run)
	return _c
}

// Write provides a mock function with given fields: data
func (_m *Segment) Write(data []byte) (int, error) {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for Write")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (int, error)); ok {
		return rf(data)
	}
	if rf, ok := ret.Get(0).(func([]byte) int); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Segment_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type Segment_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - data []byte
func (_e *Segment_Expecter) Write(data interface{}) *Segment_Write_Call {
	return &Segment_Write_Call{Call: _e.mock.On("Write", data)}
}

func (_c *Segment_Write_Call) Run(run func(data []byte)) *Segment_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *Segment_Write_Call) Return(_a0 int, _a1 error) *Segment_Write_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Segment_Write_Call) RunAndReturn(run func([]byte) (int, error)) *Segment_Write_Call {
	_c.Call.Return(run)
	return _c
}

// NewSegment creates a new instance of Segment. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSegment(t interface {
	mock.TestingT
	Cleanup(func())
}) *Segment {
	mock := &Segment{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
