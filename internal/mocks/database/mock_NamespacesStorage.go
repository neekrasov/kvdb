// Code generated by mockery. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// NamespacesStorage is an autogenerated mock type for the NamespacesStorage type
type NamespacesStorage struct {
	mock.Mock
}

type NamespacesStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *NamespacesStorage) EXPECT() *NamespacesStorage_Expecter {
	return &NamespacesStorage_Expecter{mock: &_m.Mock}
}

// Append provides a mock function with given fields: namespace
func (_m *NamespacesStorage) Append(namespace string) ([]string, error) {
	ret := _m.Called(namespace)

	if len(ret) == 0 {
		panic("no return value specified for Append")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return rf(namespace)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NamespacesStorage_Append_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Append'
type NamespacesStorage_Append_Call struct {
	*mock.Call
}

// Append is a helper method to define mock.On call
//   - namespace string
func (_e *NamespacesStorage_Expecter) Append(namespace interface{}) *NamespacesStorage_Append_Call {
	return &NamespacesStorage_Append_Call{Call: _e.mock.On("Append", namespace)}
}

func (_c *NamespacesStorage_Append_Call) Run(run func(namespace string)) *NamespacesStorage_Append_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *NamespacesStorage_Append_Call) Return(_a0 []string, _a1 error) *NamespacesStorage_Append_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NamespacesStorage_Append_Call) RunAndReturn(run func(string) ([]string, error)) *NamespacesStorage_Append_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: namespace
func (_m *NamespacesStorage) Delete(namespace string) error {
	ret := _m.Called(namespace)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(namespace)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NamespacesStorage_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type NamespacesStorage_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - namespace string
func (_e *NamespacesStorage_Expecter) Delete(namespace interface{}) *NamespacesStorage_Delete_Call {
	return &NamespacesStorage_Delete_Call{Call: _e.mock.On("Delete", namespace)}
}

func (_c *NamespacesStorage_Delete_Call) Run(run func(namespace string)) *NamespacesStorage_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *NamespacesStorage_Delete_Call) Return(_a0 error) *NamespacesStorage_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NamespacesStorage_Delete_Call) RunAndReturn(run func(string) error) *NamespacesStorage_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function with given fields: namespace
func (_m *NamespacesStorage) Exists(namespace string) bool {
	ret := _m.Called(namespace)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(namespace)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NamespacesStorage_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type NamespacesStorage_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - namespace string
func (_e *NamespacesStorage_Expecter) Exists(namespace interface{}) *NamespacesStorage_Exists_Call {
	return &NamespacesStorage_Exists_Call{Call: _e.mock.On("Exists", namespace)}
}

func (_c *NamespacesStorage_Exists_Call) Run(run func(namespace string)) *NamespacesStorage_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *NamespacesStorage_Exists_Call) Return(_a0 bool) *NamespacesStorage_Exists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NamespacesStorage_Exists_Call) RunAndReturn(run func(string) bool) *NamespacesStorage_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields:
func (_m *NamespacesStorage) List() ([]string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NamespacesStorage_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type NamespacesStorage_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
func (_e *NamespacesStorage_Expecter) List() *NamespacesStorage_List_Call {
	return &NamespacesStorage_List_Call{Call: _e.mock.On("List")}
}

func (_c *NamespacesStorage_List_Call) Run(run func()) *NamespacesStorage_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *NamespacesStorage_List_Call) Return(_a0 []string, _a1 error) *NamespacesStorage_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NamespacesStorage_List_Call) RunAndReturn(run func() ([]string, error)) *NamespacesStorage_List_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: namespace
func (_m *NamespacesStorage) Save(namespace string) error {
	ret := _m.Called(namespace)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(namespace)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NamespacesStorage_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type NamespacesStorage_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - namespace string
func (_e *NamespacesStorage_Expecter) Save(namespace interface{}) *NamespacesStorage_Save_Call {
	return &NamespacesStorage_Save_Call{Call: _e.mock.On("Save", namespace)}
}

func (_c *NamespacesStorage_Save_Call) Run(run func(namespace string)) *NamespacesStorage_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *NamespacesStorage_Save_Call) Return(_a0 error) *NamespacesStorage_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NamespacesStorage_Save_Call) RunAndReturn(run func(string) error) *NamespacesStorage_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewNamespacesStorage creates a new instance of NamespacesStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNamespacesStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *NamespacesStorage {
	mock := &NamespacesStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
