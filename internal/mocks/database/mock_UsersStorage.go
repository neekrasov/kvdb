// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/neekrasov/kvdb/internal/database/identity/models"
)

// UsersStorage is an autogenerated mock type for the UsersStorage type
type UsersStorage struct {
	mock.Mock
}

type UsersStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *UsersStorage) EXPECT() *UsersStorage_Expecter {
	return &UsersStorage_Expecter{mock: &_m.Mock}
}

// Append provides a mock function with given fields: ctx, username
func (_m *UsersStorage) Append(ctx context.Context, username string) ([]string, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for Append")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]string, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = rf(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UsersStorage_Append_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Append'
type UsersStorage_Append_Call struct {
	*mock.Call
}

// Append is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *UsersStorage_Expecter) Append(ctx interface{}, username interface{}) *UsersStorage_Append_Call {
	return &UsersStorage_Append_Call{Call: _e.mock.On("Append", ctx, username)}
}

func (_c *UsersStorage_Append_Call) Run(run func(ctx context.Context, username string)) *UsersStorage_Append_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UsersStorage_Append_Call) Return(_a0 []string, _a1 error) *UsersStorage_Append_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UsersStorage_Append_Call) RunAndReturn(run func(context.Context, string) ([]string, error)) *UsersStorage_Append_Call {
	_c.Call.Return(run)
	return _c
}

// AssignRole provides a mock function with given fields: ctx, username, role
func (_m *UsersStorage) AssignRole(ctx context.Context, username string, role string) error {
	ret := _m.Called(ctx, username, role)

	if len(ret) == 0 {
		panic("no return value specified for AssignRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, username, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UsersStorage_AssignRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssignRole'
type UsersStorage_AssignRole_Call struct {
	*mock.Call
}

// AssignRole is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
//   - role string
func (_e *UsersStorage_Expecter) AssignRole(ctx interface{}, username interface{}, role interface{}) *UsersStorage_AssignRole_Call {
	return &UsersStorage_AssignRole_Call{Call: _e.mock.On("AssignRole", ctx, username, role)}
}

func (_c *UsersStorage_AssignRole_Call) Run(run func(ctx context.Context, username string, role string)) *UsersStorage_AssignRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *UsersStorage_AssignRole_Call) Return(_a0 error) *UsersStorage_AssignRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UsersStorage_AssignRole_Call) RunAndReturn(run func(context.Context, string, string) error) *UsersStorage_AssignRole_Call {
	_c.Call.Return(run)
	return _c
}

// Authenticate provides a mock function with given fields: ctx, username, password
func (_m *UsersStorage) Authenticate(ctx context.Context, username string, password string) (*models.User, error) {
	ret := _m.Called(ctx, username, password)

	if len(ret) == 0 {
		panic("no return value specified for Authenticate")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*models.User, error)); ok {
		return rf(ctx, username, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *models.User); ok {
		r0 = rf(ctx, username, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UsersStorage_Authenticate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authenticate'
type UsersStorage_Authenticate_Call struct {
	*mock.Call
}

// Authenticate is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
//   - password string
func (_e *UsersStorage_Expecter) Authenticate(ctx interface{}, username interface{}, password interface{}) *UsersStorage_Authenticate_Call {
	return &UsersStorage_Authenticate_Call{Call: _e.mock.On("Authenticate", ctx, username, password)}
}

func (_c *UsersStorage_Authenticate_Call) Run(run func(ctx context.Context, username string, password string)) *UsersStorage_Authenticate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *UsersStorage_Authenticate_Call) Return(_a0 *models.User, _a1 error) *UsersStorage_Authenticate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UsersStorage_Authenticate_Call) RunAndReturn(run func(context.Context, string, string) (*models.User, error)) *UsersStorage_Authenticate_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, username, password
func (_m *UsersStorage) Create(ctx context.Context, username string, password string) (*models.User, error) {
	ret := _m.Called(ctx, username, password)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*models.User, error)); ok {
		return rf(ctx, username, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *models.User); ok {
		r0 = rf(ctx, username, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UsersStorage_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type UsersStorage_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
//   - password string
func (_e *UsersStorage_Expecter) Create(ctx interface{}, username interface{}, password interface{}) *UsersStorage_Create_Call {
	return &UsersStorage_Create_Call{Call: _e.mock.On("Create", ctx, username, password)}
}

func (_c *UsersStorage_Create_Call) Run(run func(ctx context.Context, username string, password string)) *UsersStorage_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *UsersStorage_Create_Call) Return(_a0 *models.User, _a1 error) *UsersStorage_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UsersStorage_Create_Call) RunAndReturn(run func(context.Context, string, string) (*models.User, error)) *UsersStorage_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, username
func (_m *UsersStorage) Delete(ctx context.Context, username string) error {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UsersStorage_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type UsersStorage_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *UsersStorage_Expecter) Delete(ctx interface{}, username interface{}) *UsersStorage_Delete_Call {
	return &UsersStorage_Delete_Call{Call: _e.mock.On("Delete", ctx, username)}
}

func (_c *UsersStorage_Delete_Call) Run(run func(ctx context.Context, username string)) *UsersStorage_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UsersStorage_Delete_Call) Return(_a0 error) *UsersStorage_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UsersStorage_Delete_Call) RunAndReturn(run func(context.Context, string) error) *UsersStorage_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, username
func (_m *UsersStorage) Get(ctx context.Context, username string) (*models.User, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.User, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.User); ok {
		r0 = rf(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UsersStorage_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type UsersStorage_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *UsersStorage_Expecter) Get(ctx interface{}, username interface{}) *UsersStorage_Get_Call {
	return &UsersStorage_Get_Call{Call: _e.mock.On("Get", ctx, username)}
}

func (_c *UsersStorage_Get_Call) Run(run func(ctx context.Context, username string)) *UsersStorage_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UsersStorage_Get_Call) Return(_a0 *models.User, _a1 error) *UsersStorage_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UsersStorage_Get_Call) RunAndReturn(run func(context.Context, string) (*models.User, error)) *UsersStorage_Get_Call {
	_c.Call.Return(run)
	return _c
}

// ListUsernames provides a mock function with given fields: ctx
func (_m *UsersStorage) ListUsernames(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListUsernames")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UsersStorage_ListUsernames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUsernames'
type UsersStorage_ListUsernames_Call struct {
	*mock.Call
}

// ListUsernames is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UsersStorage_Expecter) ListUsernames(ctx interface{}) *UsersStorage_ListUsernames_Call {
	return &UsersStorage_ListUsernames_Call{Call: _e.mock.On("ListUsernames", ctx)}
}

func (_c *UsersStorage_ListUsernames_Call) Run(run func(ctx context.Context)) *UsersStorage_ListUsernames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UsersStorage_ListUsernames_Call) Return(_a0 []string, _a1 error) *UsersStorage_ListUsernames_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UsersStorage_ListUsernames_Call) RunAndReturn(run func(context.Context) ([]string, error)) *UsersStorage_ListUsernames_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function with given fields: ctx, username
func (_m *UsersStorage) Remove(ctx context.Context, username string) ([]string, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]string, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = rf(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UsersStorage_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type UsersStorage_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *UsersStorage_Expecter) Remove(ctx interface{}, username interface{}) *UsersStorage_Remove_Call {
	return &UsersStorage_Remove_Call{Call: _e.mock.On("Remove", ctx, username)}
}

func (_c *UsersStorage_Remove_Call) Run(run func(ctx context.Context, username string)) *UsersStorage_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UsersStorage_Remove_Call) Return(_a0 []string, _a1 error) *UsersStorage_Remove_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UsersStorage_Remove_Call) RunAndReturn(run func(context.Context, string) ([]string, error)) *UsersStorage_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// SaveRaw provides a mock function with given fields: ctx, user
func (_m *UsersStorage) SaveRaw(ctx context.Context, user *models.User) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for SaveRaw")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UsersStorage_SaveRaw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveRaw'
type UsersStorage_SaveRaw_Call struct {
	*mock.Call
}

// SaveRaw is a helper method to define mock.On call
//   - ctx context.Context
//   - user *models.User
func (_e *UsersStorage_Expecter) SaveRaw(ctx interface{}, user interface{}) *UsersStorage_SaveRaw_Call {
	return &UsersStorage_SaveRaw_Call{Call: _e.mock.On("SaveRaw", ctx, user)}
}

func (_c *UsersStorage_SaveRaw_Call) Run(run func(ctx context.Context, user *models.User)) *UsersStorage_SaveRaw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.User))
	})
	return _c
}

func (_c *UsersStorage_SaveRaw_Call) Return(_a0 error) *UsersStorage_SaveRaw_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UsersStorage_SaveRaw_Call) RunAndReturn(run func(context.Context, *models.User) error) *UsersStorage_SaveRaw_Call {
	_c.Call.Return(run)
	return _c
}

// NewUsersStorage creates a new instance of UsersStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUsersStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *UsersStorage {
	mock := &UsersStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
