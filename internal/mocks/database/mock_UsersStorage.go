// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	models "github.com/neekrasov/kvdb/internal/database/storage/models"
	mock "github.com/stretchr/testify/mock"
)

// UsersStorage is an autogenerated mock type for the UsersStorage type
type UsersStorage struct {
	mock.Mock
}

type UsersStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *UsersStorage) EXPECT() *UsersStorage_Expecter {
	return &UsersStorage_Expecter{mock: &_m.Mock}
}

// Append provides a mock function with given fields: user
func (_m *UsersStorage) Append(user string) ([]string, error) {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for Append")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UsersStorage_AppendUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Append'
type UsersStorage_AppendUsers_Call struct {
	*mock.Call
}

// Append is a helper method to define mock.On call
//   - user string
func (_e *UsersStorage_Expecter) Append(user interface{}) *UsersStorage_AppendUsers_Call {
	return &UsersStorage_AppendUsers_Call{Call: _e.mock.On("Append", user)}
}

func (_c *UsersStorage_AppendUsers_Call) Run(run func(user string)) *UsersStorage_AppendUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *UsersStorage_AppendUsers_Call) Return(_a0 []string, _a1 error) *UsersStorage_AppendUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UsersStorage_AppendUsers_Call) RunAndReturn(run func(string) ([]string, error)) *UsersStorage_AppendUsers_Call {
	_c.Call.Return(run)
	return _c
}

// AssignRole provides a mock function with given fields: username, role
func (_m *UsersStorage) AssignRole(username string, role string) error {
	ret := _m.Called(username, role)

	if len(ret) == 0 {
		panic("no return value specified for AssignRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(username, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UsersStorage_AssignRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssignRole'
type UsersStorage_AssignRole_Call struct {
	*mock.Call
}

// AssignRole is a helper method to define mock.On call
//   - username string
//   - role string
func (_e *UsersStorage_Expecter) AssignRole(username interface{}, role interface{}) *UsersStorage_AssignRole_Call {
	return &UsersStorage_AssignRole_Call{Call: _e.mock.On("AssignRole", username, role)}
}

func (_c *UsersStorage_AssignRole_Call) Run(run func(username string, role string)) *UsersStorage_AssignRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *UsersStorage_AssignRole_Call) Return(_a0 error) *UsersStorage_AssignRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UsersStorage_AssignRole_Call) RunAndReturn(run func(string, string) error) *UsersStorage_AssignRole_Call {
	_c.Call.Return(run)
	return _c
}

// Authenticate provides a mock function with given fields: username, password
func (_m *UsersStorage) Authenticate(username string, password string) (*models.User, error) {
	ret := _m.Called(username, password)

	if len(ret) == 0 {
		panic("no return value specified for Authenticate")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*models.User, error)); ok {
		return rf(username, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) *models.User); ok {
		r0 = rf(username, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UsersStorage_Authenticate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authenticate'
type UsersStorage_Authenticate_Call struct {
	*mock.Call
}

// Authenticate is a helper method to define mock.On call
//   - username string
//   - password string
func (_e *UsersStorage_Expecter) Authenticate(username interface{}, password interface{}) *UsersStorage_Authenticate_Call {
	return &UsersStorage_Authenticate_Call{Call: _e.mock.On("Authenticate", username, password)}
}

func (_c *UsersStorage_Authenticate_Call) Run(run func(username string, password string)) *UsersStorage_Authenticate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *UsersStorage_Authenticate_Call) Return(_a0 *models.User, _a1 error) *UsersStorage_Authenticate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UsersStorage_Authenticate_Call) RunAndReturn(run func(string, string) (*models.User, error)) *UsersStorage_Authenticate_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: username, password
func (_m *UsersStorage) Create(username string, password string) (int, error) {
	ret := _m.Called(username, password)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (int, error)); ok {
		return rf(username, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) int); ok {
		r0 = rf(username, password)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UsersStorage_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type UsersStorage_CreateUser_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - username string
//   - password string
func (_e *UsersStorage_Expecter) Create(username interface{}, password interface{}) *UsersStorage_CreateUser_Call {
	return &UsersStorage_CreateUser_Call{Call: _e.mock.On("Create", username, password)}
}

func (_c *UsersStorage_CreateUser_Call) Run(run func(username string, password string)) *UsersStorage_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *UsersStorage_CreateUser_Call) Return(id int, err error) *UsersStorage_CreateUser_Call {
	_c.Call.Return(id, err)
	return _c
}

func (_c *UsersStorage_CreateUser_Call) RunAndReturn(run func(string, string) (int, error)) *UsersStorage_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: username
func (_m *UsersStorage) Delete(username string) error {
	ret := _m.Called(username)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UsersStorage_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type UsersStorage_DeleteUser_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - username string
func (_e *UsersStorage_Expecter) Delete(username interface{}) *UsersStorage_DeleteUser_Call {
	return &UsersStorage_DeleteUser_Call{Call: _e.mock.On("Delete", username)}
}

func (_c *UsersStorage_DeleteUser_Call) Run(run func(username string)) *UsersStorage_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *UsersStorage_DeleteUser_Call) Return(_a0 error) *UsersStorage_DeleteUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UsersStorage_DeleteUser_Call) RunAndReturn(run func(string) error) *UsersStorage_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: username
func (_m *UsersStorage) Get(username string) (*models.User, error) {
	ret := _m.Called(username)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.User, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) *models.User); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UsersStorage_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type UsersStorage_GetUser_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - username string
func (_e *UsersStorage_Expecter) Get(username interface{}) *UsersStorage_GetUser_Call {
	return &UsersStorage_GetUser_Call{Call: _e.mock.On("Get", username)}
}

func (_c *UsersStorage_GetUser_Call) Run(run func(username string)) *UsersStorage_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *UsersStorage_GetUser_Call) Return(_a0 *models.User, _a1 error) *UsersStorage_GetUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UsersStorage_GetUser_Call) RunAndReturn(run func(string) (*models.User, error)) *UsersStorage_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// ListUsernames provides a mock function with given fields:
func (_m *UsersStorage) ListUsernames() ([]string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListUsernames")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UsersStorage_ListUsernames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUsernames'
type UsersStorage_ListUsernames_Call struct {
	*mock.Call
}

// ListUsernames is a helper method to define mock.On call
func (_e *UsersStorage_Expecter) ListUsernames() *UsersStorage_ListUsernames_Call {
	return &UsersStorage_ListUsernames_Call{Call: _e.mock.On("ListUsernames")}
}

func (_c *UsersStorage_ListUsernames_Call) Run(run func()) *UsersStorage_ListUsernames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UsersStorage_ListUsernames_Call) Return(_a0 []string, _a1 error) *UsersStorage_ListUsernames_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UsersStorage_ListUsernames_Call) RunAndReturn(run func() ([]string, error)) *UsersStorage_ListUsernames_Call {
	_c.Call.Return(run)
	return _c
}

// SaveRaw provides a mock function with given fields: user
func (_m *UsersStorage) SaveRaw(user models.User) error {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for SaveRaw")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UsersStorage_SaveUserRaw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveRaw'
type UsersStorage_SaveUserRaw_Call struct {
	*mock.Call
}

// SaveRaw is a helper method to define mock.On call
//   - user models.User
func (_e *UsersStorage_Expecter) SaveRaw(user interface{}) *UsersStorage_SaveUserRaw_Call {
	return &UsersStorage_SaveUserRaw_Call{Call: _e.mock.On("SaveRaw", user)}
}

func (_c *UsersStorage_SaveUserRaw_Call) Run(run func(user models.User)) *UsersStorage_SaveUserRaw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.User))
	})
	return _c
}

func (_c *UsersStorage_SaveUserRaw_Call) Return(_a0 error) *UsersStorage_SaveUserRaw_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UsersStorage_SaveUserRaw_Call) RunAndReturn(run func(models.User) error) *UsersStorage_SaveUserRaw_Call {
	_c.Call.Return(run)
	return _c
}

// NewUsersStorage creates a new instance of UsersStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUsersStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *UsersStorage {
	mock := &UsersStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
