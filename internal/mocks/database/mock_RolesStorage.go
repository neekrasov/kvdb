// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	models "github.com/neekrasov/kvdb/internal/database/storage/models"
	mock "github.com/stretchr/testify/mock"
)

// RolesStorage is an autogenerated mock type for the RolesStorage type
type RolesStorage struct {
	mock.Mock
}

type RolesStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *RolesStorage) EXPECT() *RolesStorage_Expecter {
	return &RolesStorage_Expecter{mock: &_m.Mock}
}

// Append provides a mock function with given fields: role
func (_m *RolesStorage) Append(role string) ([]string, error) {
	ret := _m.Called(role)

	if len(ret) == 0 {
		panic("no return value specified for Append")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return rf(role)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(role)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RolesStorage_Append_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Append'
type RolesStorage_Append_Call struct {
	*mock.Call
}

// Append is a helper method to define mock.On call
//   - role string
func (_e *RolesStorage_Expecter) Append(role interface{}) *RolesStorage_Append_Call {
	return &RolesStorage_Append_Call{Call: _e.mock.On("Append", role)}
}

func (_c *RolesStorage_Append_Call) Run(run func(role string)) *RolesStorage_Append_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *RolesStorage_Append_Call) Return(_a0 []string, _a1 error) *RolesStorage_Append_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RolesStorage_Append_Call) RunAndReturn(run func(string) ([]string, error)) *RolesStorage_Append_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: name
func (_m *RolesStorage) Delete(name string) error {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RolesStorage_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type RolesStorage_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - name string
func (_e *RolesStorage_Expecter) Delete(name interface{}) *RolesStorage_Delete_Call {
	return &RolesStorage_Delete_Call{Call: _e.mock.On("Delete", name)}
}

func (_c *RolesStorage_Delete_Call) Run(run func(name string)) *RolesStorage_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *RolesStorage_Delete_Call) Return(_a0 error) *RolesStorage_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RolesStorage_Delete_Call) RunAndReturn(run func(string) error) *RolesStorage_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: name
func (_m *RolesStorage) Get(name string) (*models.Role, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *models.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.Role, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *models.Role); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Role)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RolesStorage_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type RolesStorage_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - name string
func (_e *RolesStorage_Expecter) Get(name interface{}) *RolesStorage_Get_Call {
	return &RolesStorage_Get_Call{Call: _e.mock.On("Get", name)}
}

func (_c *RolesStorage_Get_Call) Run(run func(name string)) *RolesStorage_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *RolesStorage_Get_Call) Return(_a0 *models.Role, _a1 error) *RolesStorage_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RolesStorage_Get_Call) RunAndReturn(run func(string) (*models.Role, error)) *RolesStorage_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields:
func (_m *RolesStorage) List() ([]string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RolesStorage_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type RolesStorage_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
func (_e *RolesStorage_Expecter) List() *RolesStorage_List_Call {
	return &RolesStorage_List_Call{Call: _e.mock.On("List")}
}

func (_c *RolesStorage_List_Call) Run(run func()) *RolesStorage_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RolesStorage_List_Call) Return(_a0 []string, _a1 error) *RolesStorage_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RolesStorage_List_Call) RunAndReturn(run func() ([]string, error)) *RolesStorage_List_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: role
func (_m *RolesStorage) Save(role models.Role) error {
	ret := _m.Called(role)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Role) error); ok {
		r0 = rf(role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RolesStorage_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type RolesStorage_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - role models.Role
func (_e *RolesStorage_Expecter) Save(role interface{}) *RolesStorage_Save_Call {
	return &RolesStorage_Save_Call{Call: _e.mock.On("Save", role)}
}

func (_c *RolesStorage_Save_Call) Run(run func(role models.Role)) *RolesStorage_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.Role))
	})
	return _c
}

func (_c *RolesStorage_Save_Call) Return(_a0 error) *RolesStorage_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RolesStorage_Save_Call) RunAndReturn(run func(models.Role) error) *RolesStorage_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewRolesStorage creates a new instance of RolesStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRolesStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *RolesStorage {
	mock := &RolesStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
