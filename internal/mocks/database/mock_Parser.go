// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	compute "github.com/neekrasov/kvdb/internal/database/compute"

	mock "github.com/stretchr/testify/mock"
)

// Parser is an autogenerated mock type for the Parser type
type Parser struct {
	mock.Mock
}

type Parser_Expecter struct {
	mock *mock.Mock
}

func (_m *Parser) EXPECT() *Parser_Expecter {
	return &Parser_Expecter{mock: &_m.Mock}
}

// Parse provides a mock function with given fields: query
func (_m *Parser) Parse(query string) (*compute.Command, error) {
	ret := _m.Called(query)

	if len(ret) == 0 {
		panic("no return value specified for Parse")
	}

	var r0 *compute.Command
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*compute.Command, error)); ok {
		return rf(query)
	}
	if rf, ok := ret.Get(0).(func(string) *compute.Command); ok {
		r0 = rf(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compute.Command)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Parser_Parse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Parse'
type Parser_Parse_Call struct {
	*mock.Call
}

// Parse is a helper method to define mock.On call
//   - query string
func (_e *Parser_Expecter) Parse(query interface{}) *Parser_Parse_Call {
	return &Parser_Parse_Call{Call: _e.mock.On("Parse", query)}
}

func (_c *Parser_Parse_Call) Run(run func(query string)) *Parser_Parse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Parser_Parse_Call) Return(_a0 *compute.Command, _a1 error) *Parser_Parse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Parser_Parse_Call) RunAndReturn(run func(string) (*compute.Command, error)) *Parser_Parse_Call {
	_c.Call.Return(run)
	return _c
}

// NewParser creates a new instance of Parser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewParser(t interface {
	mock.TestingT
	Cleanup(func())
}) *Parser {
	mock := &Parser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
