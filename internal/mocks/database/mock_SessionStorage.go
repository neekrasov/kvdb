// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	identity "github.com/neekrasov/kvdb/internal/database/identity"
	mock "github.com/stretchr/testify/mock"
)

// SessionStorage is an autogenerated mock type for the SessionStorage type
type SessionStorage struct {
	mock.Mock
}

type SessionStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *SessionStorage) EXPECT() *SessionStorage_Expecter {
	return &SessionStorage_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: username
func (_m *SessionStorage) Create(username string) (string, error) {
	ret := _m.Called(username)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SessionStorage_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type SessionStorage_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - username string
func (_e *SessionStorage_Expecter) Create(username interface{}) *SessionStorage_Create_Call {
	return &SessionStorage_Create_Call{Call: _e.mock.On("Create", username)}
}

func (_c *SessionStorage_Create_Call) Run(run func(username string)) *SessionStorage_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *SessionStorage_Create_Call) Return(_a0 string, _a1 error) *SessionStorage_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SessionStorage_Create_Call) RunAndReturn(run func(string) (string, error)) *SessionStorage_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: token
func (_m *SessionStorage) Delete(token string) error {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SessionStorage_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type SessionStorage_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - token string
func (_e *SessionStorage_Expecter) Delete(token interface{}) *SessionStorage_Delete_Call {
	return &SessionStorage_Delete_Call{Call: _e.mock.On("Delete", token)}
}

func (_c *SessionStorage_Delete_Call) Run(run func(token string)) *SessionStorage_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *SessionStorage_Delete_Call) Return(_a0 error) *SessionStorage_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SessionStorage_Delete_Call) RunAndReturn(run func(string) error) *SessionStorage_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: token
func (_m *SessionStorage) Get(token string) (*identity.Session, error) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *identity.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*identity.Session, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) *identity.Session); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*identity.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SessionStorage_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type SessionStorage_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - token string
func (_e *SessionStorage_Expecter) Get(token interface{}) *SessionStorage_Get_Call {
	return &SessionStorage_Get_Call{Call: _e.mock.On("Get", token)}
}

func (_c *SessionStorage_Get_Call) Run(run func(token string)) *SessionStorage_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *SessionStorage_Get_Call) Return(_a0 *identity.Session, _a1 error) *SessionStorage_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SessionStorage_Get_Call) RunAndReturn(run func(string) (*identity.Session, error)) *SessionStorage_Get_Call {
	_c.Call.Return(run)
	return _c
}

// NewSessionStorage creates a new instance of SessionStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSessionStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *SessionStorage {
	mock := &SessionStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
