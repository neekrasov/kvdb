// Code generated by mockery. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Compressor is an autogenerated mock type for the Compressor type
type Compressor struct {
	mock.Mock
}

type Compressor_Expecter struct {
	mock *mock.Mock
}

func (_m *Compressor) EXPECT() *Compressor_Expecter {
	return &Compressor_Expecter{mock: &_m.Mock}
}

// Compress provides a mock function with given fields: data
func (_m *Compressor) Compress(data []byte) ([]byte, error) {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for Compress")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) ([]byte, error)); ok {
		return rf(data)
	}
	if rf, ok := ret.Get(0).(func([]byte) []byte); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Compressor_Compress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Compress'
type Compressor_Compress_Call struct {
	*mock.Call
}

// Compress is a helper method to define mock.On call
//   - data []byte
func (_e *Compressor_Expecter) Compress(data interface{}) *Compressor_Compress_Call {
	return &Compressor_Compress_Call{Call: _e.mock.On("Compress", data)}
}

func (_c *Compressor_Compress_Call) Run(run func(data []byte)) *Compressor_Compress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *Compressor_Compress_Call) Return(_a0 []byte, _a1 error) *Compressor_Compress_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Compressor_Compress_Call) RunAndReturn(run func([]byte) ([]byte, error)) *Compressor_Compress_Call {
	_c.Call.Return(run)
	return _c
}

// Decompress provides a mock function with given fields: data
func (_m *Compressor) Decompress(data []byte) ([]byte, error) {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for Decompress")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) ([]byte, error)); ok {
		return rf(data)
	}
	if rf, ok := ret.Get(0).(func([]byte) []byte); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Compressor_Decompress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Decompress'
type Compressor_Decompress_Call struct {
	*mock.Call
}

// Decompress is a helper method to define mock.On call
//   - data []byte
func (_e *Compressor_Expecter) Decompress(data interface{}) *Compressor_Decompress_Call {
	return &Compressor_Decompress_Call{Call: _e.mock.On("Decompress", data)}
}

func (_c *Compressor_Decompress_Call) Run(run func(data []byte)) *Compressor_Decompress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *Compressor_Decompress_Call) Return(_a0 []byte, _a1 error) *Compressor_Decompress_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Compressor_Decompress_Call) RunAndReturn(run func([]byte) ([]byte, error)) *Compressor_Decompress_Call {
	_c.Call.Return(run)
	return _c
}

// NewCompressor creates a new instance of Compressor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCompressor(t interface {
	mock.TestingT
	Cleanup(func())
}) *Compressor {
	mock := &Compressor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
