// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	fs "io/fs"

	mock "github.com/stretchr/testify/mock"
)

// DirEntry is an autogenerated mock type for the DirEntry type
type DirEntry struct {
	mock.Mock
}

type DirEntry_Expecter struct {
	mock *mock.Mock
}

func (_m *DirEntry) EXPECT() *DirEntry_Expecter {
	return &DirEntry_Expecter{mock: &_m.Mock}
}

// Info provides a mock function with given fields:
func (_m *DirEntry) Info() (fs.FileInfo, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Info")
	}

	var r0 fs.FileInfo
	var r1 error
	if rf, ok := ret.Get(0).(func() (fs.FileInfo, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() fs.FileInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(fs.FileInfo)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DirEntry_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type DirEntry_Info_Call struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
func (_e *DirEntry_Expecter) Info() *DirEntry_Info_Call {
	return &DirEntry_Info_Call{Call: _e.mock.On("Info")}
}

func (_c *DirEntry_Info_Call) Run(run func()) *DirEntry_Info_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DirEntry_Info_Call) Return(_a0 fs.FileInfo, _a1 error) *DirEntry_Info_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DirEntry_Info_Call) RunAndReturn(run func() (fs.FileInfo, error)) *DirEntry_Info_Call {
	_c.Call.Return(run)
	return _c
}

// IsDir provides a mock function with given fields:
func (_m *DirEntry) IsDir() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsDir")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// DirEntry_IsDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsDir'
type DirEntry_IsDir_Call struct {
	*mock.Call
}

// IsDir is a helper method to define mock.On call
func (_e *DirEntry_Expecter) IsDir() *DirEntry_IsDir_Call {
	return &DirEntry_IsDir_Call{Call: _e.mock.On("IsDir")}
}

func (_c *DirEntry_IsDir_Call) Run(run func()) *DirEntry_IsDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DirEntry_IsDir_Call) Return(_a0 bool) *DirEntry_IsDir_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DirEntry_IsDir_Call) RunAndReturn(run func() bool) *DirEntry_IsDir_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *DirEntry) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// DirEntry_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type DirEntry_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *DirEntry_Expecter) Name() *DirEntry_Name_Call {
	return &DirEntry_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *DirEntry_Name_Call) Run(run func()) *DirEntry_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DirEntry_Name_Call) Return(_a0 string) *DirEntry_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DirEntry_Name_Call) RunAndReturn(run func() string) *DirEntry_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Type provides a mock function with given fields:
func (_m *DirEntry) Type() fs.FileMode {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Type")
	}

	var r0 fs.FileMode
	if rf, ok := ret.Get(0).(func() fs.FileMode); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(fs.FileMode)
	}

	return r0
}

// DirEntry_Type_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Type'
type DirEntry_Type_Call struct {
	*mock.Call
}

// Type is a helper method to define mock.On call
func (_e *DirEntry_Expecter) Type() *DirEntry_Type_Call {
	return &DirEntry_Type_Call{Call: _e.mock.On("Type")}
}

func (_c *DirEntry_Type_Call) Run(run func()) *DirEntry_Type_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DirEntry_Type_Call) Return(_a0 fs.FileMode) *DirEntry_Type_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DirEntry_Type_Call) RunAndReturn(run func() fs.FileMode) *DirEntry_Type_Call {
	_c.Call.Return(run)
	return _c
}

// NewDirEntry creates a new instance of DirEntry. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDirEntry(t interface {
	mock.TestingT
	Cleanup(func())
}) *DirEntry {
	mock := &DirEntry{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
