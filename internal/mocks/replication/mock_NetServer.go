// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// NetServer is an autogenerated mock type for the NetServer type
type NetServer struct {
	mock.Mock
}

type NetServer_Expecter struct {
	mock *mock.Mock
}

func (_m *NetServer) EXPECT() *NetServer_Expecter {
	return &NetServer_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *NetServer) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NetServer_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type NetServer_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *NetServer_Expecter) Close() *NetServer_Close_Call {
	return &NetServer_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *NetServer_Close_Call) Run(run func()) *NetServer_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *NetServer_Close_Call) Return(_a0 error) *NetServer_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NetServer_Close_Call) RunAndReturn(run func() error) *NetServer_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: ctx, handler
func (_m *NetServer) Start(ctx context.Context, handler func(context.Context, string, []byte) []byte) {
	_m.Called(ctx, handler)
}

// NetServer_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type NetServer_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
//   - handler func(context.Context , string , []byte) []byte
func (_e *NetServer_Expecter) Start(ctx interface{}, handler interface{}) *NetServer_Start_Call {
	return &NetServer_Start_Call{Call: _e.mock.On("Start", ctx, handler)}
}

func (_c *NetServer_Start_Call) Run(run func(ctx context.Context, handler func(context.Context, string, []byte) []byte)) *NetServer_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(context.Context, string, []byte) []byte))
	})
	return _c
}

func (_c *NetServer_Start_Call) Return() *NetServer_Start_Call {
	_c.Call.Return()
	return _c
}

func (_c *NetServer_Start_Call) RunAndReturn(run func(context.Context, func(context.Context, string, []byte) []byte)) *NetServer_Start_Call {
	_c.Run(run)
	return _c
}

// NewNetServer creates a new instance of NetServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNetServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *NetServer {
	mock := &NetServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
