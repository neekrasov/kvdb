// Code generated by mockery. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Iterator is an autogenerated mock type for the Iterator type
type Iterator struct {
	mock.Mock
}

type Iterator_Expecter struct {
	mock *mock.Mock
}

func (_m *Iterator) EXPECT() *Iterator_Expecter {
	return &Iterator_Expecter{mock: &_m.Mock}
}

// Next provides a mock function with given fields: _a0
func (_m *Iterator) Next(_a0 int) ([]byte, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Next")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]byte, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(int) []byte); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Iterator_Next_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Next'
type Iterator_Next_Call struct {
	*mock.Call
}

// Next is a helper method to define mock.On call
//   - _a0 int
func (_e *Iterator_Expecter) Next(_a0 interface{}) *Iterator_Next_Call {
	return &Iterator_Next_Call{Call: _e.mock.On("Next", _a0)}
}

func (_c *Iterator_Next_Call) Run(run func(_a0 int)) *Iterator_Next_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *Iterator_Next_Call) Return(_a0 []byte, _a1 error) *Iterator_Next_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Iterator_Next_Call) RunAndReturn(run func(int) ([]byte, error)) *Iterator_Next_Call {
	_c.Call.Return(run)
	return _c
}

// NewIterator creates a new instance of Iterator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIterator(t interface {
	mock.TestingT
	Cleanup(func())
}) *Iterator {
	mock := &Iterator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
